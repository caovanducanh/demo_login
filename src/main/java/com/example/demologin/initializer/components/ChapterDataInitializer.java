package com.example.demologin.initializer.components;

import java.util.List;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.demologin.entity.Chapter;
import com.example.demologin.entity.LessonPlan;
import com.example.demologin.repository.ChapterRepository;
import com.example.demologin.repository.LessonPlanRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Chapter Data Initializer
 * 
 * Responsible for creating chapters for lesson plans.
 * This must run after EducationDataInitializer since it depends on lesson plans.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class ChapterDataInitializer {

    private final ChapterRepository chapterRepository;
    private final LessonPlanRepository lessonPlanRepository;

    @Transactional
    public void initializeChapters() {
        log.info("üìñ Initializing chapters...");
        
        if (chapterRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Chapters already exist, skipping chapter initialization");
            return;
        }

        createChaptersForLessonPlans();
        
        log.info("‚úÖ Successfully initialized {} chapters", chapterRepository.count());
    }

    private void createChaptersForLessonPlans() {
        log.debug("üìö Creating chapters for lesson plans...");
        
        List<LessonPlan> lessonPlans = lessonPlanRepository.findAll();
        
        if (lessonPlans.isEmpty()) {
            log.warn("‚ö†Ô∏è No lesson plans found, cannot create chapters");
            return;
        }

        for (LessonPlan lessonPlan : lessonPlans) {
            createChaptersForLessonPlan(lessonPlan);
        }
        
        log.debug("‚úÖ Created chapters for {} lesson plans", lessonPlans.size());
    }

    private void createChaptersForLessonPlan(LessonPlan lessonPlan) {
        String subject = extractSubjectFromTitle(lessonPlan.getTitle());
        
        List<String> chapterNames = getChapterNamesForSubject(subject);
        
        for (int i = 0; i < chapterNames.size(); i++) {
            Chapter chapter = Chapter.builder()
                .lessonPlan(lessonPlan)
                .name(chapterNames.get(i))
                .orderNo(i + 1)
                .build();
            
            chapterRepository.save(chapter);
        }
    }

    private String extractSubjectFromTitle(String title) {
        if (title.contains("To√°n h·ªçc")) return "To√°n h·ªçc";
        if (title.contains("Ti·∫øng Vi·ªát")) return "Ti·∫øng Vi·ªát";
        if (title.contains("Khoa h·ªçc")) return "Khoa h·ªçc";
        if (title.contains("L·ªãch s·ª≠")) return "L·ªãch s·ª≠";
        if (title.contains("ƒê·ªãa l√Ω")) return "ƒê·ªãa l√Ω";
        if (title.contains("Ti·∫øng Anh")) return "Ti·∫øng Anh";
        return "T·ªïng h·ª£p";
    }

    private List<String> getChapterNamesForSubject(String subject) {
        return switch (subject) {
            case "To√°n h·ªçc" -> List.of(
                "Ch∆∞∆°ng 1: S·ªë t·ª± nhi√™n v√† c√°c ph√©p t√≠nh",
                "Ch∆∞∆°ng 2: H√¨nh h·ªçc c∆° b·∫£n",
                "Ch∆∞∆°ng 3: ƒêo l∆∞·ªùng v√† ƒë∆°n v·ªã",
                "Ch∆∞∆°ng 4: B√†i to√°n c√≥ l·ªùi vƒÉn",
                "Ch∆∞∆°ng 5: Th·ªëng k√™ v√† x√°c su·∫•t ƒë∆°n gi·∫£n"
            );
            case "Ti·∫øng Vi·ªát" -> List.of(
                "Ch∆∞∆°ng 1: T·∫≠p ƒë·ªçc",
                "Ch∆∞∆°ng 2: Ch√≠nh t·∫£",
                "Ch∆∞∆°ng 3: Luy·ªán t·ª´ v√† c√¢u",
                "Ch∆∞∆°ng 4: T·∫≠p l√†m vƒÉn",
                "Ch∆∞∆°ng 5: Ng·ªØ ph√°p c∆° b·∫£n"
            );
            case "Khoa h·ªçc" -> List.of(
                "Ch∆∞∆°ng 1: Th·∫ø gi·ªõi xung quanh ta",
                "Ch∆∞∆°ng 2: Con ng∆∞·ªùi v√† s·ª©c kh·ªèe",
                "Ch∆∞∆°ng 3: ƒê·ªông v·∫≠t v√† th·ª±c v·∫≠t",
                "Ch∆∞∆°ng 4: ƒê·∫•t, n∆∞·ªõc, kh√¥ng kh√≠",
                "Ch∆∞∆°ng 5: V·∫≠t ch·∫•t v√† nƒÉng l∆∞·ª£ng"
            );
            case "L·ªãch s·ª≠" -> List.of(
                "Ch∆∞∆°ng 1: L·ªãch s·ª≠ c·ªï ƒë·∫°i",
                "Ch∆∞∆°ng 2: C√°c tri·ªÅu ƒë·∫°i phong ki·∫øn",
                "Ch∆∞∆°ng 3: Th·ªùi k·ª≥ c·∫≠n ƒë·∫°i",
                "Ch∆∞∆°ng 4: L·ªãch s·ª≠ hi·ªán ƒë·∫°i",
                "Ch∆∞∆°ng 5: Truy·ªÅn th·ªëng v√† vƒÉn h√≥a"
            );
            case "ƒê·ªãa l√Ω" -> List.of(
                "Ch∆∞∆°ng 1: B·∫£n ƒë·ªì v√† ƒë·ªãnh h∆∞·ªõng",
                "Ch∆∞∆°ng 2: Kh√≠ h·∫≠u v√† th·ªùi ti·∫øt",
                "Ch∆∞∆°ng 3: ƒê·ªãa h√¨nh Vi·ªát Nam",
                "Ch∆∞∆°ng 4: T√†i nguy√™n thi√™n nhi√™n",
                "Ch∆∞∆°ng 5: D√¢n c∆∞ v√† ho·∫°t ƒë·ªông kinh t·∫ø"
            );
            case "Ti·∫øng Anh" -> List.of(
                "Chapter 1: Greetings and Introductions",
                "Chapter 2: Family and Friends",
                "Chapter 3: School and Learning",
                "Chapter 4: Daily Activities",
                "Chapter 5: Hobbies and Interests"
            );
            default -> List.of(
                "Ch∆∞∆°ng 1: Ki·∫øn th·ª©c c∆° b·∫£n",
                "Ch∆∞∆°ng 2: Luy·ªán t·∫≠p v√† th·ª±c h√†nh",
                "Ch∆∞∆°ng 3: ·ª®ng d·ª•ng th·ª±c t·∫ø"
            );
        };
    }
}