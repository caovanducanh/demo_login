package com.example.demologin.initializer.components;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.demologin.entity.ClassEntity;
import com.example.demologin.entity.Grade;
import com.example.demologin.entity.LessonPlan;
import com.example.demologin.repository.ClassEntityRepository;
import com.example.demologin.repository.GradeRepository;
import com.example.demologin.repository.LessonPlanRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Education Data Initializer
 * 
 * Responsible for creating default education data including grades, classes, and lesson plans.
 * This provides basic academic structure for the system.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class EducationDataInitializer {

    private final GradeRepository gradeRepository;
    private final ClassEntityRepository classEntityRepository;
    private final LessonPlanRepository lessonPlanRepository;

    @Transactional
    public void initializeEducationData() {
        log.info("üìö Initializing education data (grades, classes, lesson plans)...");
        
        initializeGrades();
        initializeClasses();
        initializeLessonPlans();
        
        log.info("‚úÖ Successfully initialized education data");
    }

    private void initializeGrades() {
        log.debug("üéì Creating default grades...");
        
        if (gradeRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Grades already exist, skipping grade initialization");
            return;
        }

        List<Grade> grades = List.of(
            Grade.builder()
                .name("L·ªõp 1")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© nh·∫•t")
                .build(),
            Grade.builder()
                .name("L·ªõp 2")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© hai")
                .build(),
            Grade.builder()
                .name("L·ªõp 3")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© ba")
                .build(),
            Grade.builder()
                .name("L·ªõp 4")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© t∆∞")
                .build(),
            Grade.builder()
                .name("L·ªõp 5")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© nƒÉm")
                .build(),
            Grade.builder()
                .name("L·ªõp 6")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© s√°u")
                .build(),
            Grade.builder()
                .name("L·ªõp 7")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© b·∫£y")
                .build(),
            Grade.builder()
                .name("L·ªõp 8")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© t√°m")
                .build(),
            Grade.builder()
                .name("L·ªõp 9")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© ch√≠n")
                .build(),
            Grade.builder()
                .name("L·ªõp 10")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© m∆∞·ªùi")
                .build(),
            Grade.builder()
                .name("L·ªõp 11")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© m∆∞·ªùi m·ªôt")
                .build(),
            Grade.builder()
                .name("L·ªõp 12")
                .description("L·ªõp h·ªçc d√†nh cho h·ªçc sinh nƒÉm th·ª© m∆∞·ªùi hai")
                .build()
        );

        gradeRepository.saveAll(grades);
        log.debug("‚úÖ Created {} grades", grades.size());
    }

    private void initializeClasses() {
        log.debug("üè´ Creating default classes...");
        
        if (classEntityRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Classes already exist, skipping class initialization");
            return;
        }

        List<Grade> grades = gradeRepository.findAll();
        if (grades.isEmpty()) {
            log.warn("‚ö†Ô∏è No grades found, cannot create classes");
            return;
        }

        // T·∫°o 2 l·ªõp cho m·ªói kh·ªëi l·ªõp
        for (Grade grade : grades) {
            for (int i = 1; i <= 2; i++) {
                ClassEntity classEntity = ClassEntity.builder()
                    .name(grade.getName() + "A" + i)
                    .grade(grade)
                    .createdAt(LocalDateTime.now())
                    .build();
                
                classEntityRepository.save(classEntity);
            }
        }
        
        log.debug("‚úÖ Created {} classes", classEntityRepository.count());
    }

    private void initializeLessonPlans() {
        log.debug("üìã Creating default lesson plans...");
        
        if (lessonPlanRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Lesson plans already exist, skipping lesson plan initialization");
            return;
        }

        List<Grade> grades = gradeRepository.findAll();
        if (grades.isEmpty()) {
            log.warn("‚ö†Ô∏è No grades found, cannot create lesson plans");
            return;
        }

        // T·∫°o k·∫ø ho·∫°ch b√†i h·ªçc m·∫´u cho t·ª´ng kh·ªëi l·ªõp
        String[] subjects = {"To√°n h·ªçc", "Ti·∫øng Vi·ªát", "Khoa h·ªçc", "L·ªãch s·ª≠", "ƒê·ªãa l√Ω", "Ti·∫øng Anh"};
        
        for (Grade grade : grades) {
            for (String subject : subjects) {
                LessonPlan lessonPlan = LessonPlan.builder()
                    .title("K·∫ø ho·∫°ch " + subject + " - " + grade.getName())
                    .content("K·∫ø ho·∫°ch gi·∫£ng d·∫°y m√¥n " + subject + " d√†nh cho " + grade.getName() + ". " +
                           "N·ªôi dung chi ti·∫øt k·∫ø ho·∫°ch gi·∫£ng d·∫°y m√¥n " + subject + " cho " + grade.getName())
                    .grade(grade)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();
                
                lessonPlanRepository.save(lessonPlan);
            }
        }
        
        log.debug("‚úÖ Created {} lesson plans", lessonPlanRepository.count());
    }
}